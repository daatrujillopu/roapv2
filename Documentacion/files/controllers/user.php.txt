<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

/**
 * Esta clase se encarga de generar formularios automaticos a partir de
 * @Access public
 * @Autor Danny Alexander Trujillo Pulgarin
 * @Category Usuarios_No_Registrados
 * @Package Controladores
 * @Subpackage Controladores/Usuario
 */

class User extends CI_Controller{
    /**
     * @var User_standard Variable que tiene la estructura del estandar proporcionado por el usuario
     */
    private $standard;

    /**
     *Constructor de la clase que carga las librerias encrypt y user_standard, ademas de crear una nueva estancia de la clase user_standard
     */
    public function __construct(){
        parent::__construct();
        $this->load->library('encrypt');
        $this->load->library("User_standard");
        $this->standard = new User_standard();
    }

    /**
     * Es el metodo por defecto donde se carga las paginas
     * @Access Public
     * @Autor Danny Alexander Trujillo Pulgarin
     */

    public function index(){
        //echo $this->standard->get_actual_id();
        $this->standard->structure_standard();
        $data = array(

            "actual_id" => $this->encrypt->encode($this->standard->get_actual_id()),
            "spadres" => $this->standard->get_spadres(),
            "padres" => $this->standard->get_padres(),
            "hijos" => $this->standard->get_hijos(),
            "main" => "user/form"
        );
        $this->load->view("layouts/user_template", $data);
    }


    public function wizard_form(){
        //$this->standard->structure_standard();
        $data = array(
            "actual_id" => $this->encrypt->encode($this->standard->get_actual_id()),
            "main" => "user/wizard_form"
        );
        $this->load->view("layouts/user_template", $data);
    }
    //funciones para insertar datos
    /**
     * Funcion se encarga de guardar los datos de cada categoria del estandar brindado por el usuario
     * @Access public
     * @Category Usuarios_No_Registrados
     * @Package Controladores
     * @Subpackage Controladores/Usuario
     */
    public function save_category(){
        $datos = json_decode($this->input->get("datos"));
        $metadatos = json_decode($this->input->get("elementos"));
        $oa = $this->encrypt->decode($this->input->get("oa"));
        //echo $oa;
        for($i = 0; $i<count($datos); $i++) {
            $dato = $datos[$i];
            $father = $metadatos[$i];
            $father = explode("_",$father);
            if(count($father)<3){
                $padre = $father[0];
                $hijo = $father[1];
                $this->standard->insert_in_oas($padre,$hijo,$oa,$dato);
            }else{
                $padre = $father[0];
                $hijo = $father[1];
                $orden = $father[2];
                $this->standard->insert_in_table($padre, $hijo, $oa, $dato, $orden);
            }
        }

    }

    /**
     * Funcion se encarga de borrar los metadatos de cada categoria del estandar brindado por el usuario
     * @Access public
     * @Category Usuarios_No_Registrados
     * @Package Controladores
     * @Subpackage Controladores/Usuario
     */
    public function delete_metadato(){

        $metadato = $this->input->get("metadato");
        $oa = $this->encrypt->decode($this->input->get("oa"));
        echo $oa;
        $father = $metadato;
        $father = explode("_",$father);
        echo $metadato;
        $padre = $father[0];
        $orden = $father[2];
        $this->standard->delete_in_table($padre, $oa, $orden);
    }

    /**
     * Esta funciÃ³n se encarga de subir archivos mediante el metodo ajax solo para un archivo
     * @Access public
     * @Category Usuarios_No_Registrados
     * @Package Controladores
     * @Subpackage Controladores/Usuario
     */

    public function uploadfile(){

        $actual_id = $this->standard->get_actual_id();
        if(!is_dir("./upload/".$actual_id)){
            mkdir("./upload/".$actual_id, 0777);
        }
        $direccionima = "./upload/".$actual_id;
        $fecha = date("Y-m-d-H-i-s");
        $config['upload_path'] = $direccionima;
        $config['allowed_types'] = '*';
        $config['max_size'] = '1000000';
        $nombre = $_FILES['archivo']['name'];
        $extension = end(explode(".", $nombre));
        $config['file_name'] = $actual_id.".".$extension;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('archivo')) {
            echo "errores";
            $error = array('error' => $this->upload->display_errors());
            print_r($error);
//            $this->index();
//
//                $this->load->view('formulario_carga', $error);
        }

        /*$this->load->library('upload', $config);
        $upload_folder ='upload';
        $nombre_archivo = $_FILES['archivo']['name'];
        $tipo_archivo = $_FILES['archivo']['type'];
        $tamano_archivo = $_FILES['archivo']['size'];
        $tmp_archivo = $_FILES['archivo']['tmp_name'];
        $archivador = $upload_folder . '/' . $nombre_archivo;
        if (!move_uploaded_file($tmp_archivo, $archivador)) {

        }*/
    }
}
?>
